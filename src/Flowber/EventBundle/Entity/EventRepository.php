<?php

namespace Flowber\EventBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Flowber\EventBundle\Entity\Event;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function getInfosEvent($id){       
        $query = $this->_em->createQuery(''
                . 'SELECT event.startDate, '
                . 'event.startTime, event.endDate, event.endTime, '
                . 'address.name, address.address, address.city, address.zipcode, address.coordinates '
                . 'FROM FlowberEventBundle:Event event '
                . 'LEFT JOIN FlowberUserBundle:PostalAddress address  WITH event.postalAddress = address '
                . 'WHERE event.id = :id');
        $query->setParameter('id', $id);
        
        return $query->getSingleResult();
    }
    
        /*
     * Récupère la phrase d'accroche et la description
     * Return subtitle, job, description, creationDaten
     */
    public function GetFourEventsId($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.subscriber_id=".$circle." "
                . "AND sub.statut='event' "
                . "ORDER BY sub.creationDate desc "
                . "LIMIT 4";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }

    /*
     * Récupère la phrase d'accroche et la description
     * Return subtitle, job, description, creationDaten
     */
    public function GetEventsId($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.subscriber_id=".$circle." "
                . "AND sub.statut='event' "
                . "ORDER BY sub.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }
    
    /*
     * Récupère la phrase d'accroche et la description
     * Return subtitle, job, description, creationDaten
     */
    public function GetCountMembers($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.circle_id=".$circle;
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    }    

    public function GetMembers($circle){
        $sql = "SELECT sub.subscriber_id "
                . "FROM  subscribers sub "
                . "WHERE sub.circle_id=".$circle;        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subscriber_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }   

    /*
     * Récupère les id des amis du cercle $circle
     */
    public function GetFriendsId($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.subscriber_id=".$circle." "
                . "AND sub.statut='profile' "
                . "ORDER BY sub.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }
    
    /*
     * Récupère tous les id des groupes auquel participe l'user circle
     */
    public function GetAllEventsId(){
        $sql = "SELECT event.id "
                . "FROM  Event event "
                . "ORDER BY event.startDate desc "
                . "LIMIT 18";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }    
}
