<?php

namespace Flowber\EventBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Flowber\EventBundle\Entity\Event;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function getInfosEvent($id){       
        $query = $this->_em->createQuery(''
                . 'SELECT event.startDate, '
                . 'event.startTime, event.endDate, event.endTime, '
                . 'address.name, address.address, address.city, address.zipcode, address.coordinates '
                . 'FROM FlowberEventBundle:Event event '
                . 'LEFT JOIN FlowberUserBundle:PostalAddress address  WITH event.postalAddress = address '
                . 'WHERE event.id = :id');
        $query->setParameter('id', $id);
        
        return $query->getSingleResult();
    }
    
        /*
     * Récupère la phrase d'accroche et la description
     * Return subtitle, job, description, creationDaten
     */
    public function GetFourEventsId($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.subscriber_id=".$circle." "
                . "AND sub.statut='event' "
                . "ORDER BY sub.creationDate desc "
                . "LIMIT 4";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }

    /*
     * Récupère la phrase d'accroche et la description
     * Return subtitle, job, description, creationDaten
     */
    public function GetEventsId($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.subscriber_id=".$circle." "
                . "AND sub.statut='event' "
                . "ORDER BY sub.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }
    
    /*
     * Récupère la phrase d'accroche et la description
     * Return subtitle, job, description, creationDaten
     */
    public function GetCountMembers($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.circle_id=".$circle;
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    }    

    public function GetMembers($circle){
        $sql = "SELECT sub.subscriber_id "
                . "FROM  subscribers sub "
                . "WHERE sub.circle_id=".$circle;        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subscriber_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }   

    /*
     * Récupère les id des amis du cercle $circle
     */
    public function GetFriendsId($circle){
        $sql = "SELECT sub.circle_id "
                . "FROM  subscribers sub "
                . "WHERE sub.subscriber_id=".$circle." "
                . "AND sub.statut='profile' "
                . "ORDER BY sub.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('circle_id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }
    
    /*
     * Récupère tous les id des groupes auquel participe l'user circle
     */
    public function GetAllEventsId(){
        $sql = "SELECT event.id "
                . "FROM  Event event "
                . "ORDER BY event.startDate desc "
                . "LIMIT 18";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }   
    

    public function getEventsByTitleSearch($string, $currentCircle){
        
        $events = [];
       
        // looking for subscribed or hosted events
        $query = $this->_em->createQuery(''
                . 'SELECT e.id as id '
                . 'FROM FlowberEventBundle:Event e, FlowberCircleBundle:Subscribers sub '
                . 'WHERE sub.circle = e '
                . 'AND  sub.subscriber = :currentCircle '
                . 'AND e.title LIKE :string ')
        ->setParameter('currentCircle', $currentCircle)
        ->setParameter('string', "%".$string."%");
        
        $subscribedEvents = $query->getResult();
        
        foreach($subscribedEvents AS $event){
            $events[] = $event;
        }
        
        //////////
        
        // looking for public events
        $query = $this->_em->createQuery(''
                . 'SELECT e.id as id ' 
                . 'FROM FlowberEventBundle:Event e '
                . 'WHERE e.privacy = :privacy '
                . 'AND e.title LIKE :string ')
        ->setParameter('privacy', "public")
        ->setParameter('string', "%".$string."%");
        
        $publicEvents = $query->getResult();
        
        foreach($publicEvents AS $event){
            if(!in_array($event, $events)){ // no clone
                $events[] = $event;
            }
        }
        
        return $events;
    }
    
    public function findEventsIdByCriteria($arrayCriteria){
        //die(var_dump($arrayCriteria));
        
        $sql = "";
                
        $postalAddressInvoked = false;
        $select = "SELECT event.id as event_id ";
        $from = "FROM event, circle ";
        $conditions = "WHERE event.id = circle.id ";
        
        if(!empty($arrayCriteria['title'])){
            $conditions.= "AND circle.title LIKE :title ";
            //$query->setParameter('title', "%".$arrayCriteria['title']."%");
        }
        
        if(!empty($arrayCriteria['eventDate']) || !$arrayCriteria['pastEvent'] ){
            $conditions.= "AND event.startDate >= :startDate ";
        }
        
        if(!empty($arrayCriteria['eventTime'])){
            $conditions.= "AND ( event.startTime >= :startTime "
                    . "OR event.startTime IS NULL ) ";
//            $query->setParameter('startTime', $arrayCriteria['eventTime']);
        }

        
        if($arrayCriteria['categories']->count()){ 
            $arrayCategories = $arrayCriteria['categories']->toArray();
            $categoriesIDs = [];
            foreach($arrayCategories AS $category){
                $categoriesIDs[] = $category->getId();
            }
            $categories = implode(",", $categoriesIDs);
            $from.= " , event_category ";
            $conditions.= "AND event_category.event_id = event.id ";
            $conditions.= "AND event_category.category_id IN (:categories) ";
//            $query->setParameter('categories', $categories);
        }

        if(!empty($arrayCriteria['zipcode'])){
            if(!$postalAddressInvoked){ // add from postalAddress
                $postalAddressInvoked = true;
                $from.= ", postal_address ";
                $conditions.= "AND postal_address.id = event.postal_address_id ";
            }
            
            $conditions.= "AND postal_address.zipcode = :zipcode ";
//            $query->setParameter('zipcode', $arrayCriteria['zipcode']);
        }
        
        if(!empty($arrayCriteria['placeName'])){
            if(!$postalAddressInvoked){ // add from postalAddress
                $postalAddressInvoked = true;
                $from.= ", postal_address ";
                $conditions.= "AND postal_address.id = event.postal_address_id ";
            }
            
            $conditions.= "AND postal_address.name LIKE :placeName ";
//            $query->setParameter('placeName', "%".$arrayCriteria['placeName']."%");
        }        
        
        if($arrayCriteria['pastEvent']){ // if past events included, we display from most recent to oldest
            $order = "ORDER BY event.startDate DESC, event.startTime DESC ";
        }else{
            $order = "ORDER BY event.startDate ASC, event.startTime ASC ";
        }
        
        $sql = $select.$from.$conditions.$order;
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('event_id', 'id');
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        //die(var_dump($dql));
        
        if(!empty($arrayCriteria['title'])){
            $query->setParameter('title', "%".$arrayCriteria['title']."%");
        }
        
        if(!empty($arrayCriteria['eventDate'])){
            $startDateFormatted = $arrayCriteria['eventDate']->format("Y-m-d");
//            die($startDateFormatted);
            $query->setParameter('startDate', $startDateFormatted);
        }elseif(!$arrayCriteria['pastEvent']){
//            die("do not include past events");
            $startDate = new \DateTime("today");
            $startDateFormatted = $startDate->format("Y-m-d");
            $query->setParameter('startDate', $startDateFormatted);
        }
        
        if(!empty($arrayCriteria['eventTime'])){
            $query->setParameter('startTime', $arrayCriteria['eventTime']);
        }
        
        if($arrayCriteria['categories']->count()){
            $query->setParameter('categories', $categories);
        }

        if(!empty($arrayCriteria['zipcode'])){
            $query->setParameter('zipcode', $arrayCriteria['zipcode']);
        }
        
        if(!empty($arrayCriteria['placeName'])){
            $query->setParameter('placeName', "%".$arrayCriteria['placeName']."%");
        }

        
        $result = $query->getResult();
//        die(var_dump($query->getSQL()));
                
        if(!$arrayCriteria['fullEvent']){
            $filtered = [];
            foreach($result AS $e){
                if(!$this->isEventFull($e["id"])){
                    $filtered[]["id"] = $e["id"];
                }
            }
            $result = $filtered;
        }
//        die(var_dump($result));
        
        return $result;
    }
    
    public function isEventFull($eventId){
        $sql = "SELECT event.max_participants AS maxParticipants, subcount.nb AS subcount "
                . "FROM  event, (SELECT count(circle_id) as nb FROM subscribers WHERE circle_id = :eventId ) subcount "
                . "WHERE event.id = :eventId ";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('maxParticipants', 'maxParticipants');
        $rsm->addScalarResult('subcount', 'subcount');
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm)
            ->setParameter('eventId', $eventId);
        
        $result = $query->getSingleResult();
        
//        die("id: ".$eventId." - ".$result["maxParticipants"]);
//        die("id: ".$eventId." - ".(is_numeric($result["maxParticipants"]) && ($result["maxParticipants"] >= $result["subcount"])));
        
        if(!is_numeric($result["maxParticipants"])){
            return false;
        }
        
        return  $result["subcount"] >= $result["maxParticipants"];
    }
    
}
