<?php

namespace Flowber\PrivateMessageBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Flowber\UserBundle\Entity\User;
/**
 * PrivateMessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrivateMessageRepository extends EntityRepository
{
//    public function getReceivedMessages(User $user){
//        $sql = "SELECT message.subject, message.message, user.firstname, user.surname, user.email, message.creationDate "
//            . "FROM (SELECT * FROM messages_to_user a, private_message b "
//                    . "WHERE a.user_id = ".$user->getId()." "
//                    . "AND a.private_message_id=b.id) "
//                . "message, user "
//            . "WHERE message.user_from_id = user.id ";
//        
//        $rsm = new ResultSetMapping;
//        $rsm->addScalarResult('subject', 'subject');
//        $rsm->addScalarResult('message', 'message');
//        $rsm->addScalarResult('firstname', 'firstname');
//        $rsm->addScalarResult('surname', 'surname');
//        $rsm->addScalarResult('email', 'email');
//        $rsm->addScalarResult('creationDate', 'creationDate');
//        
//        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
//    }        
    
    /*
     * Récupère les messages reçus
     * return entity PrivateMessage
     */
    public function getReceivedMessages(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userTo = :userTo')
            ->setParameter('userTo', $user)
            ->andWhere('a.statut != :statut')
            ->setParameter('statut', '3')
            ->andWhere('a.statut != :statutbis')
            ->setParameter('statutbis', '0')
            ->orderBy('a.creationDate', 'DESC');
        
        return $qb->getQuery()
                  ->getResult();
    }
    
    /*
     * Récupère les messages reçus non lus
     * return entity PrivateMessage
     * A FAIRE
     */
    public function getReceivedMessagesNotRead(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userTo = :userTo')
            ->setParameter('userTo', $user)
            ->andWhere('a.statut != :statut')
            ->setParameter('statut', '3')
            ->andWhere('a.statut != :statutbis')
            ->setParameter('statutbis', '0')
            ->orderBy('a.creationDate', 'DESC');
        
        return $qb->getQuery()
                  ->getResult();
    }
    
    /*
     * Récupère le nombre  messages reçus
     * return integer
     */    
    public function getReceiveddMessagesNumber(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userTo = :userTo')
            ->andWhere('a.statut != :statut')
            ->setParameter('statut', '3')
            ->andWhere('a.statut != :statutbis')
            ->setParameter('statutbis', '0')
            ->setParameter('userTo', $user);

        return count($qb->getQuery()->getResult());
    }
    
    /*
     * Récupère le nombre  messages reçus non lus
     * return integer
     */        
    public function getReceiveddMessagesNotReadNumber(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userTo = :userTo')
            ->andWhere('a.statut != :statut')
            ->setParameter('statut', '3')
            ->andWhere('a.statut != :statutbis')
            ->setParameter('statutbis', '0')
            ->setParameter('userTo', $user);

        return count($qb->getQuery()->getResult());
    }  

    /*
     * Récupère les messages supprimés
     * return entity PrivateMessage
     */
    public function getDeletedMessages(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userTo = :userTo')
            ->setParameter('userTo', $user)            
            ->orWhere('a.userFrom = :userFrom')
            ->setParameter('userFrom', $user)
            ->andWhere('a.statut = :statut')
            ->setParameter('statut', '3')
            ->orderBy('a.creationDate', 'DESC');
        
        return $qb->getQuery()
                  ->getResult();
    }

    /*
     * Récupère le nombre messages supprimé
     * return integer
     */     
    public function getDeletedMessagesNumber(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userTo = :userTo')
            ->setParameter('userTo', $user)            
            ->orWhere('a.userFrom = :userFrom')
            ->setParameter('userFrom', $user)
            ->andWhere('a.statut = :statut')
            ->setParameter('statut', '3');  
        
        return count($qb->getQuery()
                ->getResult());
    }
    
    /*
     * Récupère les messages envoyés
     * return entity PrivateMessage
     */    
    public function getSentMessages(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userFrom = :userFrom')
            ->setParameter('userFrom', $user)
            ->andWhere('a.statut != :statut')
            ->setParameter('statut', '3')
            ->andWhere('a.statut != :statutbis')
            ->setParameter('statutbis', '0')
            ->orderBy('a.creationDate', 'DESC');
        
        return $qb->getQuery()
                  ->getResult();
    }
    
    /*
     * Récupère le nombre messages envoyé
     * return integer
     */      
    public function getSentMessagesNumber(User $user){
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')
            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
            ->where('a.userFrom = :userFrom')
            ->setParameter('userFrom', $user)
            ->andWhere('a.statut != :statut')
            ->setParameter('statut', '3')
            ->andWhere('a.statut != :statutbis')
            ->setParameter('statutbis', '0')
            ->setParameter('userFrom', $user);

        return count($qb->getQuery()->getResult());
    }
}
