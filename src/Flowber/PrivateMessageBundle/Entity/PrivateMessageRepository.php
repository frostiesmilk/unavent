<?php

namespace Flowber\PrivateMessageBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Flowber\UserBundle\Entity\User;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * PrivateMessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrivateMessageRepository extends EntityRepository
{
    public function getReceivedMessages($circleId){
        $sql = "SELECT message.subject, message.message, message.message_from_id, "
                . "message.message_id, message.statut, message.creationDate "
                . "FROM (SELECT b.subject, a.id, b.message, b.message_from_id, b.creationDate, "
                . "a.message_id, a.receiver, a.statut FROM receiver a, private_message b "
                . "WHERE a.receiver = ".$circleId." AND a.message_id=b.id ) message "
                . "WHERE statut='1' OR statut='2' "
                . "ORDER BY message.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subject', 'subject');
        $rsm->addScalarResult('message', 'message');
        $rsm->addScalarResult('statut', 'statut');
        $rsm->addScalarResult('message_id', 'messageId');
        $rsm->addScalarResult('message_from_id', 'circleFromId');
        $rsm->addScalarResult('creationDate', 'creationDate');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }
    
    public function getNumberMessageNotRead($circleId){
        $sql = "SELECT  statut "
                . "FROM  receiver a "
                . "WHERE receiver = ".$circleId."  "
                . "AND  a.statut='2'";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('statut', 'statut');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    }  
    
    public function getOneReceivedMessage($id){
        $sql = "SELECT message.subject, message.message, message.message_from_id, "
                . "message.id, message.statut, message.creationDate "
                . "FROM  private_message message "
                . "WHERE id = ".$id." "
                . "ORDER BY message.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subject', 'subject');
        $rsm->addScalarResult('message', 'message');
        $rsm->addScalarResult('statut', 'statut');
        $rsm->addScalarResult('id', 'messageId');
        $rsm->addScalarResult('message_from_id', 'circleFromId');
        $rsm->addScalarResult('creationDate', 'creationDate');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getSingleResult();
    }
    
    public function getCountReceivedMessages($circleId){
        $sql = "SELECT "
                . "message.id "
                . "FROM (SELECT a.id, a.statut, b.creationDate "
                . "FROM receiver a, private_message b "
                . "WHERE a.receiver = ".$circleId." AND a.message_id=b.id ) message "
                . "WHERE statut='1' OR statut='2' "
                . "ORDER BY message.creationDate desc";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    }
    
    public function getReceivedDeletedMessages($circleId){
        $sql = "SELECT message.subject, message.message, message.message_from_id, "
                . "message.message_id, message.statut, message.creationDate "
                . "FROM (SELECT b.subject, a.id, b.message, b.message_from_id, b.creationDate, "
                . "a.message_id, a.receiver, a.statut FROM receiver a, private_message b "
                . "WHERE a.receiver = ".$circleId." AND a.message_id=b.id ) message "
                . "WHERE statut='3' "
                . "ORDER BY message.creationDate desc";

        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subject', 'subject');
        $rsm->addScalarResult('message', 'message');
        $rsm->addScalarResult('statut', 'statut');
        $rsm->addScalarResult('message_id', 'messageId');
        $rsm->addScalarResult('message_from_id', 'circleFromId');
        $rsm->addScalarResult('creationDate', 'creationDate');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    } 

    public function getCountReceivedDeletedMessages($circleId){
        $sql = "SELECT "
                . "message.id "
                . "FROM (SELECT a.id, a.statut, b.creationDate "
                . "FROM receiver a, private_message b "
                . "WHERE a.receiver = ".$circleId." AND a.message_id=b.id ) message "
                . "WHERE statut='3' "
                . "ORDER BY message.creationDate desc";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    } 
    
    public function getSentMessages($circleId){
        $sql = "SELECT message.subject, message.message, message.message_from_id, "
                . "message.id, message.statut, message.creationDate "
                . "FROM (SELECT b.subject, b.id, b.message, b.message_from_id, b.creationDate, "
                . "b.statut FROM receiver a, private_message b "
                . "WHERE b.message_from_id = ".$circleId." AND a.message_id=b.id ) message "
                . "WHERE statut='1' OR statut='2' "
                . "ORDER BY message.creationDate desc";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subject', 'subject');
        $rsm->addScalarResult('message', 'message');
        $rsm->addScalarResult('statut', 'statut');
        $rsm->addScalarResult('id', 'messageId');
        $rsm->addScalarResult('message_from_id', 'circleFromId');
        $rsm->addScalarResult('creationDate', 'creationDate');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }  

    public function getCountSentMessages($circleId){
        $sql = "SELECT id "
            . "FROM private_message message "
                . "WHERE message.message_from_id = ".$circleId." AND (statut='1' OR statut='2')";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    } 
    
    public function getSentDeletedMessages($circleId){
        $sql = "SELECT message.subject, message.message, message.message_from_id, message.message_from_id, message.statut, message.id, message.creationDate "
            . "FROM private_message message "
                . "WHERE message.message_from_id = ".$circleId." AND message.statut='3' ORDER BY message.creationDate desc";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('subject', 'subject');
        $rsm->addScalarResult('message', 'message');
        $rsm->addScalarResult('statut', 'statut');
        $rsm->addScalarResult('id', 'messageId');
        $rsm->addScalarResult('message_from_id', 'circleFromId');
        $rsm->addScalarResult('creationDate', 'creationDate');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }  
    
    public function getCountSentDeletedMessages($circleId){
        $sql = "SELECT id "
            . "FROM private_message message "
                . "WHERE message.message_from_id = ".$circleId." AND message.statut='3' ORDER BY message.creationDate desc";
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        
        return count($this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult());
    }    
    
    public function getReceiversMessages($messageId){
        $sql = "SELECT receiver FROM receiver WHERE message_id = ".$messageId;
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('receiver', 'receiverId');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getResult();
    }  
    
     public function getReceiversId($messageId, $receiver){
        $sql = "SELECT id FROM receiver WHERE message_id = ".$messageId ." and receiver = ".$receiver;
        
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'receiverMessageId');
        
        return $this->getEntityManager()->createNativeQuery($sql, $rsm)->getSingleResult();
    }     
    /*
     * Récupère les messages reçus non lus
     * return entity PrivateMessage
     * A FAIRE
     */
    public function getReceivedMessagesNotRead(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userTo = :userTo')
//            ->setParameter('userTo', $user)
//            ->andWhere('a.statut != :statut')
//            ->setParameter('statut', '3')
//            ->andWhere('a.statut != :statutbis')
//            ->setParameter('statutbis', '0')
//            ->orderBy('a.creationDate', 'DESC');
//        
//        return $qb->getQuery()
//                  ->getResult();
    }
    
    /*
     * Récupère le nombre  messages reçus
     * return integer
     */    
    public function getReceiveddMessagesNumber(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userTo = :userTo')
//            ->andWhere('a.statut != :statut')
//            ->setParameter('statut', '3')
//            ->andWhere('a.statut != :statutbis')
//            ->setParameter('statutbis', '0')
//            ->setParameter('userTo', $user);
//
//        return count($qb->getQuery()->getResult());
    }
    
    /*
     * Récupère le nombre  messages reçus non lus
     * return integer
     */        
    public function getReceiveddMessagesNotReadNumber(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userTo = :userTo')
//            ->andWhere('a.statut != :statut')
//            ->setParameter('statut', '3')
//            ->andWhere('a.statut != :statutbis')
//            ->setParameter('statutbis', '0')
//            ->setParameter('userTo', $user);
//
//        return count($qb->getQuery()->getResult());
    }  

    /*
     * Récupère les messages supprimés
     * return entity PrivateMessage
     */
    public function getDeletedMessages(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userTo = :userTo')
//            ->setParameter('userTo', $user)            
//            ->orWhere('a.userFrom = :userFrom')
//            ->setParameter('userFrom', $user)
//            ->andWhere('a.statut = :statut')
//            ->setParameter('statut', '3')
//            ->orderBy('a.creationDate', 'DESC');
//        
//        return $qb->getQuery()
//                  ->getResult();
    }

    /*
     * Récupère le nombre messages supprimé
     * return integer
     */     
    public function getDeletedMessagesNumber(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userTo = :userTo')
//            ->setParameter('userTo', $user)            
//            ->orWhere('a.userFrom = :userFrom')
//            ->setParameter('userFrom', $user)
//            ->andWhere('a.statut = :statut')
//            ->setParameter('statut', '3');  
//        
//        return count($qb->getQuery()
//                ->getResult());
    }
    
    /*
     * Récupère les messages envoyés
     * return entity PrivateMessage
     */    
//    public function getSentMessages(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userFrom = :userFrom')
//            ->setParameter('userFrom', $user)
//            ->andWhere('a.statut != :statut')
//            ->setParameter('statut', '3')
//            ->andWhere('a.statut != :statutbis')
//            ->setParameter('statutbis', '0')
//            ->orderBy('a.creationDate', 'DESC');
//        
//        return $qb->getQuery()
//                  ->getResult();
//    }
    
    /*
     * Récupère le nombre messages envoyé
     * return integer
     */      
    public function getSentMessagesNumber(User $user){
//        $qb = $this->_em->createQueryBuilder();
//        
//        $qb->select('a')
//            ->from('FlowberPrivateMessageBundle:PrivateMessage', 'a')
//            ->where('a.userFrom = :userFrom')
//            ->setParameter('userFrom', $user)
//            ->andWhere('a.statut != :statut')
//            ->setParameter('statut', '3')
//            ->andWhere('a.statut != :statutbis')
//            ->setParameter('statutbis', '0')
//            ->setParameter('userFrom', $user);
//
//        return count($qb->getQuery()->getResult());
    }
}
